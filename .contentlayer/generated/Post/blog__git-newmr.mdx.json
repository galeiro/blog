{
  "title": "My favorite productivity hack: git newmr",
  "summary": "Using git aliases to automate repetitive tasks",
  "publishedAt": "2021-02-08",
  "tags": [
    "Productivity"
  ],
  "body": {
    "raw": "\nHow you tried to automate any daily tasks of your programming? You should!\n\nA git workflow I do every day is code something, stash it, checkout latest master, create a new branch, push my new code and create a mr/pr for it. This gets tedious over time given I usually do it 5+ times a day. [Git aliases](https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases) to the rescue!\n\nMy workplace uses gitlab and they support [push options](https://docs.gitlab.com/ee/user/project/push_options.html), one of which is creating a Merge Request (Pull Request equivalent for GitHub). Thanks to this you can easily create a Gitlab merge request using the CLI. Let me present you the alias `git newmr`, allowing you to do all of the above things with one command!\n\n```bash\ngit config --global alias.newmr \"!f() { git stash save && git checkout master && git pull && git checkout -b $1 && git stash apply && git add . && git commit -m $1 && git push -u origin HEAD -o merge_request.create; }; f\"\n```\n\nI can trigger the command with `git newmr <branchname>` and it:\n\n1. Stashes the current changes\n2. Checks out and pulls the latest master branch\n3. Creates a new branch based on `<branchname>`\n4. Applies the stash\n5. Commits changes\n6. Pushes the new branch as a remote\n7. Creates a PR/MR\n\nAt my workplace we use [Jira](https://www.atlassian.com/software/jira) for issue tracking, and by setting the branch name to the issue number the issue will automatically close on jira when the branch is merged. Example: `git newmr TL-1337`.\n\n## Creating your own\n\nCreating a custom [git alias](https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases) is super easy. Looking at the example on the linked page adding a “unstage” alias is as easy as:\n\n```bash\ngit config --global alias.unstage 'reset HEAD --'\n```\n\nIn our case we want do do a lot of different things and pass parameters and that's were basic git aliases start to limit us. Luckily there is a solution to this!\n\n## Escaping to the shell\n\nWe can access the shell by using the ! (bang). We can now have a lot more possibility including multiple commands and passing parameters. Let's add the commands we're looking for based on the list above. $1 means the first parameter we pass, so let's add it as our branch name and commit message. The -o option in our git push is gitlabs push option, in this case we’re using it to create a merge request.\n\n```bash\ngit config --global alias.newmr \"!f() { git stash save && git checkout master && git pull && git checkout -b $1 && git stash apply && git add . && git commit -m $1 && git push -u origin HEAD -o merge_request.create; }; f\"\n```\n\nAfter running the command above you can use it with `git newmr <branch_name>` ✌️✨\n\n## Adopting it for GitHub\n\nIf you are using GitHub you can can use [their cli](https://cli.github.com/manual/gh_pr_create) instead of push options for creating the pull request with `gh pr create`.\n\nFirst install the GitHub cli with brew\n\n```bash\nbrew install gh\n```\n\nThen add our alias, note that I've  renamed it to `git newpr` to separate it from the gitlab version.\n\n```bash\ngit config --global alias.newpr \"!f() { git stash save && git checkout master && git pull && git checkout -b $1 && git stash apply && git add . && git commit -m $1 && git push -u origin HEAD && gh pr create; }; f\"\n```\n\n## Editing you aliases or troubleshooting\n\nAll your aliases are stored in the global git config located in `~home/<username>/.gitconfig`. My complete file now looks like this:\n\n```bash\n[user]\n  name = Samuel Kraft\n  email = samuelkraft@me.com\n[alias]\n  newmr = \"!f() { git stash save && git checkout master && git pull && git checkout -b $1 && git stash apply && git add . && git commit -m $1 && git push -u origin HEAD -o merge_request.create; }; f\"\n  newpr = \"!f() { git stash save && git checkout master && git pull && git checkout -b $1 && git stash apply && git add . && git commit -m $1 && git push -u origin HEAD && gh pr create; }; f\"\n```\n\nDo you have any other tips for custom aliases? Let me know on [Twitter](https://twitter.com/samuelkraft)!\n",
    "code": "var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var b=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),k=(n,e)=>{for(var s in e)i(n,s,{get:e[s],enumerable:!0})},c=(n,e,s,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of m(e))!u.call(n,t)&&t!==s&&i(n,t,{get:()=>e[t],enumerable:!(l=g(e,t))||l.enumerable});return n};var f=(n,e,s)=>(s=n!=null?d(p(n)):{},c(e||!n||!n.__esModule?i(s,\"default\",{value:n,enumerable:!0}):s,n)),N=n=>c(i({},\"__esModule\",{value:!0}),n);var o=b((x,r)=>{r.exports=_jsx_runtime});var A={};k(A,{default:()=>v,frontmatter:()=>w});var a=f(o()),w={title:\"My favorite productivity hack: git newmr\",publishedAt:\"2021-02-08\",summary:\"Using git aliases to automate repetitive tasks\",tags:[\"Productivity\"]};function h(n){let e=Object.assign({p:\"p\",a:\"a\",code:\"code\",pre:\"pre\",span:\"span\",ol:\"ol\",li:\"li\",h2:\"h2\"},n.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:\"How you tried to automate any daily tasks of your programming? You should!\"}),`\n`,(0,a.jsxs)(e.p,{children:[\"A git workflow I do every day is code something, stash it, checkout latest master, create a new branch, push my new code and create a mr/pr for it. This gets tedious over time given I usually do it 5+ times a day. \",(0,a.jsx)(e.a,{href:\"https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases\",children:\"Git aliases\"}),\" to the rescue!\"]}),`\n`,(0,a.jsxs)(e.p,{children:[\"My workplace uses gitlab and they support \",(0,a.jsx)(e.a,{href:\"https://docs.gitlab.com/ee/user/project/push_options.html\",children:\"push options\"}),\", one of which is creating a Merge Request (Pull Request equivalent for GitHub). Thanks to this you can easily create a Gitlab merge request using the CLI. Let me present you the alias \",(0,a.jsx)(e.code,{children:\"git newmr\"}),\", allowing you to do all of the above things with one command!\"]}),`\n`,(0,a.jsx)(e.pre,{className:\"language-bash\",children:(0,a.jsx)(e.code,{className:\"language-bash code-highlight\",children:(0,a.jsxs)(e.span,{className:\"code-line\",children:[(0,a.jsx)(e.span,{className:\"token function\",children:\"git\"}),\" config \",(0,a.jsx)(e.span,{className:\"token parameter variable\",children:\"--global\"}),\" alias.newmr \",(0,a.jsxs)(e.span,{className:\"token string\",children:['\"!f() { git stash save && git checkout master && git pull && git checkout -b ',(0,a.jsx)(e.span,{className:\"token variable\",children:\"$1\"}),\" && git stash apply && git add . && git commit -m \",(0,a.jsx)(e.span,{className:\"token variable\",children:\"$1\"}),' && git push -u origin HEAD -o merge_request.create; }; f\"']}),`\n`]})})}),`\n`,(0,a.jsxs)(e.p,{children:[\"I can trigger the command with \",(0,a.jsx)(e.code,{children:\"git newmr <branchname>\"}),\" and it:\"]}),`\n`,(0,a.jsxs)(e.ol,{children:[`\n`,(0,a.jsx)(e.li,{children:\"Stashes the current changes\"}),`\n`,(0,a.jsx)(e.li,{children:\"Checks out and pulls the latest master branch\"}),`\n`,(0,a.jsxs)(e.li,{children:[\"Creates a new branch based on \",(0,a.jsx)(e.code,{children:\"<branchname>\"})]}),`\n`,(0,a.jsx)(e.li,{children:\"Applies the stash\"}),`\n`,(0,a.jsx)(e.li,{children:\"Commits changes\"}),`\n`,(0,a.jsx)(e.li,{children:\"Pushes the new branch as a remote\"}),`\n`,(0,a.jsx)(e.li,{children:\"Creates a PR/MR\"}),`\n`]}),`\n`,(0,a.jsxs)(e.p,{children:[\"At my workplace we use \",(0,a.jsx)(e.a,{href:\"https://www.atlassian.com/software/jira\",children:\"Jira\"}),\" for issue tracking, and by setting the branch name to the issue number the issue will automatically close on jira when the branch is merged. Example: \",(0,a.jsx)(e.code,{children:\"git newmr TL-1337\"}),\".\"]}),`\n`,(0,a.jsx)(e.h2,{children:\"Creating your own\"}),`\n`,(0,a.jsxs)(e.p,{children:[\"Creating a custom \",(0,a.jsx)(e.a,{href:\"https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases\",children:\"git alias\"}),\" is super easy. Looking at the example on the linked page adding a \\u201Cunstage\\u201D alias is as easy as:\"]}),`\n`,(0,a.jsx)(e.pre,{className:\"language-bash\",children:(0,a.jsx)(e.code,{className:\"language-bash code-highlight\",children:(0,a.jsxs)(e.span,{className:\"code-line\",children:[(0,a.jsx)(e.span,{className:\"token function\",children:\"git\"}),\" config \",(0,a.jsx)(e.span,{className:\"token parameter variable\",children:\"--global\"}),\" alias.unstage \",(0,a.jsx)(e.span,{className:\"token string\",children:\"'reset HEAD --'\"}),`\n`]})})}),`\n`,(0,a.jsx)(e.p,{children:\"In our case we want do do a lot of different things and pass parameters and that's were basic git aliases start to limit us. Luckily there is a solution to this!\"}),`\n`,(0,a.jsx)(e.h2,{children:\"Escaping to the shell\"}),`\n`,(0,a.jsx)(e.p,{children:\"We can access the shell by using the ! (bang). We can now have a lot more possibility including multiple commands and passing parameters. Let's add the commands we're looking for based on the list above. $1 means the first parameter we pass, so let's add it as our branch name and commit message. The -o option in our git push is gitlabs push option, in this case we\\u2019re using it to create a merge request.\"}),`\n`,(0,a.jsx)(e.pre,{className:\"language-bash\",children:(0,a.jsx)(e.code,{className:\"language-bash code-highlight\",children:(0,a.jsxs)(e.span,{className:\"code-line\",children:[(0,a.jsx)(e.span,{className:\"token function\",children:\"git\"}),\" config \",(0,a.jsx)(e.span,{className:\"token parameter variable\",children:\"--global\"}),\" alias.newmr \",(0,a.jsxs)(e.span,{className:\"token string\",children:['\"!f() { git stash save && git checkout master && git pull && git checkout -b ',(0,a.jsx)(e.span,{className:\"token variable\",children:\"$1\"}),\" && git stash apply && git add . && git commit -m \",(0,a.jsx)(e.span,{className:\"token variable\",children:\"$1\"}),' && git push -u origin HEAD -o merge_request.create; }; f\"']}),`\n`]})})}),`\n`,(0,a.jsxs)(e.p,{children:[\"After running the command above you can use it with \",(0,a.jsx)(e.code,{children:\"git newmr <branch_name>\"}),\" \\u270C\\uFE0F\\u2728\"]}),`\n`,(0,a.jsx)(e.h2,{children:\"Adopting it for GitHub\"}),`\n`,(0,a.jsxs)(e.p,{children:[\"If you are using GitHub you can can use \",(0,a.jsx)(e.a,{href:\"https://cli.github.com/manual/gh_pr_create\",children:\"their cli\"}),\" instead of push options for creating the pull request with \",(0,a.jsx)(e.code,{children:\"gh pr create\"}),\".\"]}),`\n`,(0,a.jsx)(e.p,{children:\"First install the GitHub cli with brew\"}),`\n`,(0,a.jsx)(e.pre,{className:\"language-bash\",children:(0,a.jsx)(e.code,{className:\"language-bash code-highlight\",children:(0,a.jsxs)(e.span,{className:\"code-line\",children:[\"brew \",(0,a.jsx)(e.span,{className:\"token function\",children:\"install\"}),` gh\n`]})})}),`\n`,(0,a.jsxs)(e.p,{children:[\"Then add our alias, note that I've  renamed it to \",(0,a.jsx)(e.code,{children:\"git newpr\"}),\" to separate it from the gitlab version.\"]}),`\n`,(0,a.jsx)(e.pre,{className:\"language-bash\",children:(0,a.jsx)(e.code,{className:\"language-bash code-highlight\",children:(0,a.jsxs)(e.span,{className:\"code-line\",children:[(0,a.jsx)(e.span,{className:\"token function\",children:\"git\"}),\" config \",(0,a.jsx)(e.span,{className:\"token parameter variable\",children:\"--global\"}),\" alias.newpr \",(0,a.jsxs)(e.span,{className:\"token string\",children:['\"!f() { git stash save && git checkout master && git pull && git checkout -b ',(0,a.jsx)(e.span,{className:\"token variable\",children:\"$1\"}),\" && git stash apply && git add . && git commit -m \",(0,a.jsx)(e.span,{className:\"token variable\",children:\"$1\"}),' && git push -u origin HEAD && gh pr create; }; f\"']}),`\n`]})})}),`\n`,(0,a.jsx)(e.h2,{children:\"Editing you aliases or troubleshooting\"}),`\n`,(0,a.jsxs)(e.p,{children:[\"All your aliases are stored in the global git config located in \",(0,a.jsx)(e.code,{children:\"~home/<username>/.gitconfig\"}),\". My complete file now looks like this:\"]}),`\n`,(0,a.jsx)(e.pre,{className:\"language-bash\",children:(0,a.jsxs)(e.code,{className:\"language-bash code-highlight\",children:[(0,a.jsxs)(e.span,{className:\"code-line\",children:[(0,a.jsx)(e.span,{className:\"token punctuation\",children:\"[\"}),\"user\",(0,a.jsx)(e.span,{className:\"token punctuation\",children:\"]\"}),`\n`]}),(0,a.jsxs)(e.span,{className:\"code-line\",children:[\"  name \",(0,a.jsx)(e.span,{className:\"token operator\",children:\"=\"}),` Samuel Kraft\n`]}),(0,a.jsxs)(e.span,{className:\"code-line\",children:[\"  email \",(0,a.jsx)(e.span,{className:\"token operator\",children:\"=\"}),` samuelkraft@me.com\n`]}),(0,a.jsxs)(e.span,{className:\"code-line\",children:[(0,a.jsx)(e.span,{className:\"token punctuation\",children:\"[\"}),\"alias\",(0,a.jsx)(e.span,{className:\"token punctuation\",children:\"]\"}),`\n`]}),(0,a.jsxs)(e.span,{className:\"code-line\",children:[\"  newmr \",(0,a.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" \",(0,a.jsxs)(e.span,{className:\"token string\",children:['\"!f() { git stash save && git checkout master && git pull && git checkout -b ',(0,a.jsx)(e.span,{className:\"token variable\",children:\"$1\"}),\" && git stash apply && git add . && git commit -m \",(0,a.jsx)(e.span,{className:\"token variable\",children:\"$1\"}),' && git push -u origin HEAD -o merge_request.create; }; f\"']}),`\n`]}),(0,a.jsxs)(e.span,{className:\"code-line\",children:[\"  newpr \",(0,a.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" \",(0,a.jsxs)(e.span,{className:\"token string\",children:['\"!f() { git stash save && git checkout master && git pull && git checkout -b ',(0,a.jsx)(e.span,{className:\"token variable\",children:\"$1\"}),\" && git stash apply && git add . && git commit -m \",(0,a.jsx)(e.span,{className:\"token variable\",children:\"$1\"}),' && git push -u origin HEAD && gh pr create; }; f\"']}),`\n`]})]})}),`\n`,(0,a.jsxs)(e.p,{children:[\"Do you have any other tips for custom aliases? Let me know on \",(0,a.jsx)(e.a,{href:\"https://twitter.com/samuelkraft\",children:\"Twitter\"}),\"!\"]})]})}function y(n={}){let{wrapper:e}=n.components||{};return e?(0,a.jsx)(e,Object.assign({},n,{children:(0,a.jsx)(h,n)})):h(n)}var v=y;return N(A);})();\n;return Component;"
  },
  "_id": "blog/git-newmr.mdx",
  "_raw": {
    "sourceFilePath": "blog/git-newmr.mdx",
    "sourceFileName": "git-newmr.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/git-newmr"
  },
  "type": "Post",
  "slug": "git-newmr",
  "image": "/blog/git-newmr/image.png",
  "og": "/blog/git-newmr/og.jpg"
}